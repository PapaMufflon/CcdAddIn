// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace CcdAddIn.UI.Spec
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Retrospective")]
    public partial class RetrospectiveFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Retrospective.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Retrospective", "In order to reflect my day\nAs a clean code developer\nI want to do a retrospective" +
                    "", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Make a retrospective")]
        public virtual void MakeARetrospective()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make a retrospective", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
  testRunner.Given("I am at a non-black level");
#line 8
  testRunner.When("I click on retrospective");
#line 9
  testRunner.Then("I should be able to evaluate the principles and practices");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No suggestion to go to the next level")]
        public virtual void NoSuggestionToGoToTheNextLevel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No suggestion to go to the next level", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
  testRunner.Given("I am at a non-black level");
#line 13
  testRunner.And("I finish my retrospective with no suggestion to advance to the next level");
#line 14
  testRunner.When("I accept that");
#line 15
  testRunner.Then("I should stay at the current level");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Keep the current level")]
        public virtual void KeepTheCurrentLevel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Keep the current level", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
  testRunner.Given("I am at a non-black level");
#line 19
  testRunner.And("I finish my retrospective with a suggestion to advance to the next level");
#line 20
  testRunner.When("I decline to advance");
#line 21
  testRunner.Then("I should stay at the current level");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Advance to the next level")]
        public virtual void AdvanceToTheNextLevel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Advance to the next level", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
  testRunner.Given("I am at a non-black level");
#line 25
  testRunner.And("I finish my retrospective with a suggestion to advance to the next level");
#line 26
  testRunner.When("I accept to advance to the next level");
#line 27
  testRunner.Then("I should be at the next level");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Advance to the next level on my own")]
        public virtual void AdvanceToTheNextLevelOnMyOwn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Advance to the next level on my own", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
  testRunner.Given("I am at a non-black level");
#line 31
  testRunner.And("I finish my retrospective with no suggestion to advance to the next level");
#line 32
  testRunner.When("I actively wish to advance to the next level");
#line 33
  testRunner.Then("I should be at the next level");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
